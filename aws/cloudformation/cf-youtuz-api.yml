---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Stack Tableau for Ec2. See https://github.com/dkn-maida/youtuz-api"

Parameters:

  DisplayName:
    Description: "Project name"
    Type: String
    Default: "youtuz-api"

  #AMI generated by EC2 Image builder youtue-api pipeline   
  baseAMI:
    Description: "Base AMI"
    Type: AWS::EC2::Image::Id
    Default: "ami-048343943cd71b4d1"
    ConstraintDescription: "Must be a valid AMI ID."

  Environment:
    Description: Environment
    Type: String
    Default: "prod"
    AllowedValues:
      - "prod"
 
  Ec2Type:
    Description: "EC2 instance type."
    Type: String
    Default: "t2.micro"
    AllowedValues: 
      - "t2.micro"
    ConstraintDescription: "Must be a valid EC2 instance type."
  
  TagApp:
    Description: "Application Tag."
    Type: String
    Default: "youtuz"
    AllowedValues:
      - "youtuz"

  TagComp:
    Description: "Comp Tag."
    Type: String
    Default: "api"
    AllowedValues:
      - "api"

Mappings:
  EnvironmentMap:
    prod:
      IamInstanceProfile: "arn:aws:iam::572705134170:instance-profile/youtuz-instance-role"
      SecurityGroupSSH: "sg-0eb14d326ec651184"
      VPC: "vpc-0ef074f3fe7578734"
      SubnetId: "subnet-07d0dfce24ee3b212,subnet-007538ecfc5b4fcd3"
      AZIdForInstances: "us-east-1a,us-east-1b"
      KeyName: "youtuz-api"
      DesiredCapacity: 1
      SecurityGroupRegionalEdge: "sg-0eef282648480fef5"
      Certificate: arn:aws:acm:us-east-1:572705134170:certificate/166f5a66-9038-431e-9c01-d63faecc3237
      ApiKey: '{{resolve:secretsmanager:youtuz-api-key:SecretString:apiKey::}}'
      MaxAsgSize: 4

Resources:

  SecurityGroupForInstances:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${DisplayName}-instances-${Environment}"
      GroupDescription: "Security group dedicated to youtuz-api"
      VpcId: !FindInMap [EnvironmentMap, !Ref Environment, VPC]

      Tags:
        - Key: "Name"
          Value: !Sub "sg-${DisplayName}-${Environment}"
        - Key: "App"
          Value: !Ref TagApp
        - Key: "Comp"
          Value: !Ref TagComp
        - Key: "Env"
          Value: !Ref Environment

      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: "Allow traffic from Load Balancer."
  

  AutoScalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub "${DisplayName}-lc-${Environment}"
      ImageId: !Ref "baseAMI"
      InstanceType: !Ref "Ec2Type"
      IamInstanceProfile: !FindInMap [EnvironmentMap, !Ref Environment, IamInstanceProfile]
      KeyName: !FindInMap [EnvironmentMap, !Ref Environment, KeyName]
      SecurityGroups:
        - !Ref "SecurityGroupForInstances"
        - !FindInMap [EnvironmentMap, !Ref Environment, SecurityGroupSSH]
      UserData: !Base64
        Fn::Join:
          - ""
          - - "#!/bin/bash\n"
            - "sudo yum update -y\n"
            - "mkdir apps && cd apps && aws s3 cp s3://drakin-apps/youtuz-api/youtuz-api.tgz . && tar xzvf youtuz-api.tgz && cd package && npm i && node api.js"
            
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${DisplayName}-asg-${Environment}"
      LaunchConfigurationName: !Ref "AutoScalingLaunchConfig"
      AvailabilityZones: !Split [",", !FindInMap [EnvironmentMap, !Ref Environment, AZIdForInstances]]
      VPCZoneIdentifier: !Split [",", !FindInMap [EnvironmentMap, !Ref Environment, SubnetId]]
      DesiredCapacity: !FindInMap [EnvironmentMap, !Ref Environment, DesiredCapacity]
      MinSize: !FindInMap [EnvironmentMap, !Ref Environment, DesiredCapacity]
      MaxSize: !FindInMap [EnvironmentMap, !Ref Environment, MaxAsgSize]
      HealthCheckGracePeriod: 86400
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: "Name"
          Value: !Sub "${DisplayName}-${Environment}"
          PropagateAtLaunch: true
        - Key: "Env"
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: "Comp"
          Value: !Ref TagComp
          PropagateAtLaunch: true
        - Key: "App"
          Value: !Ref TagApp
          PropagateAtLaunch: true
    
      
          
###############################################################################

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: "ipv4"
      Name: !Sub "${DisplayName}-alb-i-${Environment}"
      Scheme: 'internet-facing'
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Subnets: 
        - "subnet-00e91c342f0ea3ee9"
        - "subnet-0a5139f9fb55705e8"
      Tags:
        - Key: "Name"
          Value: !Sub "${DisplayName}-${Environment}"
        - Key: "Env"
          Value: !Ref Environment
        - Key: "Comp"
          Value: !Ref TagComp
        - Key: "App"
          Value: !Ref TagApp

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Youtuz api ALB SecurityGroup"
      GroupName: "Youtuz api ALB SecurityGroup"
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"

      Tags: 
        - Key: "Name"
          Value: !Sub "${DisplayName}-${Environment}"
        - Key: "Env"
          Value: !Ref Environment
        - Key: "Comp"
          Value: !Ref TagComp
        - Key: "App"
          Value: !Ref TagApp
      VpcId: !FindInMap [EnvironmentMap, !Ref Environment, VPC]
            

  ALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !FindInMap [EnvironmentMap, !Ref Environment, VPC]
      Name: !Sub "${DisplayName}-alb-i-tg-${Environment}"
      Port: 4000
      Protocol: "HTTP"
      TargetType: "instance"
      Matcher:
        HttpCode: "200"
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckPort: "4000"
      HealthCheckProtocol: "HTTP"
      HealthyThresholdCount: 2
      Tags:
        - Key: App
          Value: !Ref TagApp 
        - Key: Comp
          Value: !Ref TagComp
        - Key: Env
          Value: !Ref Environment

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: "fixed-response"
          FixedResponseConfig:
            ContentType: "text/html"
            MessageBody: "You reached the load balancer, but matched no rules"
            StatusCode: "200" 
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: "HTTPS"
      SSLCertificateId: !FindInMap [EnvironmentMap, !Ref Environment, Certificate]

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions: 
        - Type: "forward"
          TargetGroupArn: !Ref ALBTargetGroup 
      Conditions: 
        - Field: "host-header"
          HostHeaderConfig:
            Values:
              - "api.youtuz.net"
        - Field: "http-header"
          HttpHeaderConfig: 
            HttpHeaderName: "x-api-key"
            Values:
              - !FindInMap [EnvironmentMap, !Ref Environment, ApiKey]
      ListenerArn: !Ref ALBListener
      Priority: 10


###############################################################################
#Route53 record
  ALBRoute53:
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget: 
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
      Name: api.youtuz.net
      HostedZoneId: Z09023093REM7MJ59NP9Q
      Type: A